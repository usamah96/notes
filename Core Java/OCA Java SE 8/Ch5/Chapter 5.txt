Class Design
---

-With classes only the public and default access modifier is applicable. 
-private and protected access modifiers can be used with the inner classes and not the main class.

-A java file can have only one public class because according to theory, the public class name should be the file name
otherwise the code won't compile. If we put 2 public class in a single file then what will be the file name? That is
why it is a problem putting 2 public classes in a single java file

Calling the Constructor
-The super() calls to the parent constructor
-The this() calls the other constructor of the same class

Constructor Rules
  1) The first statement of every constructor is a call to another constructor within the class using this(), or a call to 
     a constructor in the direct parent class using super().
  2) The super() call may not be used after the first statement of the constructor.
  3) If no super() call is declared in a constructor, Java will insert a no-argument super() as the first statement of the 
     constructor.
  4) If the parent doesn’t have a no-argument constructor and the child doesn’t define any constructors, the compiler will 
     throw an error and try to insert a default no-argument constructor into the child class.
  5) If the parent doesn’t have a no-argument constructor, the compiler requires an explicit call to a parent constructor 
     in each child constructor.


-If a child class is extended from a parent class, we can access members from both the classes using the this keyword.
We can also explicitly use the super keyword to access the members from parent class but cannot use super to access
members of child class.

super() vs super
-The first, super(), is a statement that explicitly calls a parent constructor and may only be used in the first line of 
a constructor of a child class. The second, super, is a keyword used to reference a member defined in a parent class 
and may be used throughout the child class.


Overriding Points
  1) The method in the child class must have the same signature as the method in the parent class.
  2) The method in the child class must be at least as accessible or more accessible than the method in the parent class.
  3) The method in the child class may not throw a checked exception that is new or broader than the class of any exception thrown in the parent class method.
  4) If the method returns a value, it must be the same or a subclass of the method in the parent class, known as 
     covariant return types

-Any time you see a method with the same name as a method in the parent class, determine whether the method is being 
overloaded or overridden
  .2 methods in different classes with the same name but different parameters, the methods are overloaded.
  .2 methods in different classes with the same name and same no. of parameters, the methods are overriden.

Eg1
..
public class Bird {
 public void fly() {
 System.out.println("Bird is flying");
 }
 public void eat(int food) {
 System.out.println("Bird is eating "+food+" units of food");
 }
}
public class Eagle extends Bird {
 public int fly(int height) { // Overloaded Method
 System.out.println("Bird is flying at "+height+" meters");
 return height;
 }
 public int eat(int food) { // Overriden Method. Does not compile because return type is not the subclass of other
 System.out.println("Bird is eating "+food+" units of food");
 return food;
 }
}

Eg2
public class Camel {
 protected String getNumberOfHumps() {
 return "Undefined";
 }
}
public class BactrianCamel extends Camel {
 private int getNumberOfHumps() { // Does not compile because 
 return 2;                           1) return types are not covariant  
                                     2) child method is less accessible than parent as parent is protected and child is private
 }
}




//-- For implementation
this() example
overriding concepts


Hiding Static Methods
-A hidden method occurs when a child class defi nes a static method with the same name and signature as a static 
method defi ned in a parent class. Method hiding is similar but not exactly the same as method overriding. First, 
the four previous rules for overriding a method must be followed when a method is hidden. In addition, a new rule 
is added for hiding a method, namely that the usage of the static keyword must be the same between parent and child 
classes.

Overriding vs. Hiding Methods
-Unlike overriding a method, in which a child method replaces the parent method in calls defi ned in both the parent 
and child, hidden methods only replace parent methods in the calls defi ned in the child class.
-At runtime the child version of an overridden method is always executed for an instance regardless of whether the 
method call is defi ned in a parent or child class method.

Example 1
..
public class Marsupial {
 public static boolean isBiped() {
 return false;
 }
 public void getMarsupialDescription() {
 System.out.println("Marsupial walks on two legs: "+isBiped());
 }
}
public class Kangaroo extends Marsupial {
 public static boolean isBiped() {
 return true;
 }
 public void getKangarooDescription() {
 System.out.println("Kangaroo hops on two legs: "+isBiped());
 }
 public static void main(String[] args) {
 Kangaroo joey = new Kangaroo();
 joey.getMarsupialDescription();
 joey.getKangarooDescription();
 }
}

Output: 
Marsupial walks on two legs: false
Kangaroo hops on two legs: true

-If we override the isBiped method then the output would be
Marsupial walks on two legs: true
Kangaroo hops on two legs: true

Example 2 (Method Hiding)
..
Animal a = new Animal(); // will call animal clas method
Animal a = new Cat(); // will call animal class method
Cat c = new Cat(); // will call cat class method

Example 2 (Overriding)
..
Animal a = new Animal(); // will call animal clas method
Animal a = new Cat(); // will call cat class method
Cat c = new Cat(); // will call cat class method


Creating final methods
-Final methods cannot be overriden whether the child class puts the keyword final or not with the function definition.
-You’d mark a method as final when you’re defi ning a parent class and want to guarantee certain behavior of a method 
in the parent class, regardless of which child is invoking the method.


Hiding Varaibles
-The rules for variables with the same name in the parent and child classes are a lot simpler, because Java
doesn’t allow variables to be overridden but instead hidden.
-This creates two copies of the variable within an instance of the child class: one instance defi ned for the parent 
reference and another defi ned for the child reference.
-Similar to hiding a static method, the rules for accessing the parent and child variables are quite similar. If 
you’re referencing the variable from within the parent class, the variable defined in the parent class is used. 
Alternatively, if you’re referencing the variable from within a child class, the variable defined in the child 
class is used. Likewise, you can reference the parent value of the variable with an explicit use of the super keyword.

Example
..
public class Rodent {
 protected int tailLength = 4;
 public void getRodentDetails() {
 System.out.println("[parentTail="+tailLength+"]");
 }
}
public class Mouse extends Rodent {
 protected int tailLength = 8;
 public void getMouseDetails() {
 System.out.println("[tail="+tailLength +",parentTail="+super.tailLength+"]");
 }
 public static void main(String[] args) {
 Mouse mouse = new Mouse();
 mouse.getRodentDetails();
 mouse.getMouseDetails();
 }
}

Output
[parentTail=4]
[tail=8,parentTail=4]

-Dont hide variables. Not a good practice
Example
..
public class Animal {
 public int length = 2;
}
public class Jellyfish extends Animal {
 public int length = 5;
 public static void main(String[] args) {
 Jellyfish jellyfish = new Jellyfish();
 Animal animal = new Jellyfish();
 System.out.println(jellyfish.length);
 System.out.println(animal.length);
 }
}

Output
5
2

-For example if we have a function that takes Animal as an arguement and we pass Jellyfish as a parameter, then wrong
value of length will be picked by the method.
-So always create new variables or make varaibles as private to avoid problems.



Abstract Classes
-Scenarios when abstract class don't compile

1) public final abstract class A{} // final dont allow to extend class
2) public abstract class A{ public final abstract test(); } // final dont allow to override method
3) public abstract class A{ private abstract test(); } // private will not be extended to child class hence implementation cannot be given

-Notice that when we defi ne a concrete class as the “fi rst” nonabstract subclass, we include the possibility that 
another nonabstract class may extend an existing nonabstract class. The key point is that the first class to extend 
the nonabstract class must implement all inherited abstract methods.

public abstract class Animal {
 public abstract String getName();
}
public class Bird extends Animal { // DOES NOT COMPILE
}
public class Flamingo extends Bird {
 public String getName() {
 return "Flamingo";
 }
}

Even though a second subclass Flamingo implements the abstract method getName(), the first concrete subclass 
Bird doesn’t; therefore, the Bird class will not compile.

-Extending an abstract class with another abstract
Example
..
public abstract class Animal {
 public abstract String getName();
}
public class Walrus extends Animal { // DOES NOT COMPILE
}
public abstract class Eagle extends Animal {
}

We have an abstract class Animal with a concrete subclass Walrus that doesn’t compile since it doesn’t implement a 
getName() method. We also have an abstract class Eagle, which like Walrus extends Animal and doesn’t provide an 
implementation for getName(). In this situation, Eagle does compile because it is marked as abstract. 

-There is one exception to the rule for abstract methods and concrete classes: a concrete subclass is not required 
to provide an implementation for an abstract method if an intermediate abstract class provides the implementation.
Example
..
public abstract class Animal {
 public abstract String getName();
}
public abstract class BigCat extends Animal {
 public String getName() {
  return "BigCat";
 }
 public abstract void roar();
}
public class Lion extends BigCat {
 public void roar() {
 System.out.println("The Lion lets out a loud ROAR!");
 }
}

Abstract Class Definition Rules:
1. Abstract classes cannot be instantiated directly.
2. Abstract classes may be defined with any number, including zero, of abstract and nonabstract methods.
3. Abstract classes may not be marked as private or final.
4. An abstract class that extends another abstract class inherits all of its abstract methods as its own abstract 
methods.
5. The first concrete class that extends an abstract class must provide an implementation for all of the inherited 
abstract methods.

Abstract Method Definition Rules:
1. Abstract methods may only be defined in abstract classes.
2. Abstract methods may not be declared private or final.
3. Abstract methods must not provide a method body/implementation in the abstract class for which is it declared.
4. Implementing an abstract method in a subclass follows the same rules for overriding a method. For example, the 
name and signature must be the same, and the visibility of the method in the subclass must be at least as accessible 
as the method in the parent class.


Interfaces
-An abstract data type that defi nes a list of abstract
public methods that any class implementing the interface must provide

Creating the interface
public abstract interface A {
  public static final int MINIMUM_DEPTH = 2;
  public abstract int getMaximumDepth();
}
Modifiers abstract and public, are assumed. In other words, whether or not you provide them, the compiler will 
automatically insert them as part of the method definition.

Rules
1. Interfaces cannot be instantiated directly.
2. An interface is not required to have any methods.
3. An interface may not be marked as final.
4. All top-level interfaces are assumed to have public or default access, and they must include the abstract modifier 
in their definition. Therefore, marking an interface as private, protected, or final will trigger a compiler error, 
since this is incompatible with these assumptions.
5. All nondefault methods in an interface are assumed to have the modifiers abstract and public in their definition. 
Therefore, marking a method as private, protected,m or final will trigger compiler errors as these are incompatible 
with the abstract and public keywords.

-The fourth rule doesn’t apply to inner interfaces

-The compile auto adds public and abstract keywods to our interface definition and method defitnion thats why they are
"assume keywords"

Example
..
private final interface CanCrawl { // Does not compile as final conflicts with abstract and private conflicts with public
 private void dig(int depth); // Does not compile because private conflicts with public
 protected abstract double depth(); // Does not compile because protected conflicts with public
 public final void surface(); // Does not compile because final conflicts with abstract
}


Inheriting an Interface
-2 rules
..
1. An interface that extends another interface, as well as an abstract class that implements an interface, inherits 
all of the abstract methods as its own abstract methods.
2. The first concrete class that implements an interface, or extends an abstract class that implements an interface, 
must provide an implementation for all of the inherited abstract methods.


Interface Variables
-2 rules
..
1. Interface variables are assumed to be public, static, and final. Therefore, marking a variable as private or protected will 
trigger a compiler error, as will marking any variable as abstract.
2. The value of an interface variable must be set when it is declared since it is marked as
final.

Default Interface Methods
..
1. A default method may only be declared within an interface and not within a class or abstract class.
2. A default method must be marked with the default keyword. If a method is marked as default, it must provide a 
method body.
3. A default method is not assumed to be static, final, or abstract, as it may be used or overridden by a class that 
implements the interface.
4. Like all methods in an interface, a default method is assumed to be public and will not compile if marked as private or 
protected.

-An interface extending another interface can override the default method following the overriding rules, can make the 
default method as abstract also so that any new class implements the interface should provide the implementation

Example
..
public interface HasFins {
 public default int getNumberOfFins() {
 return 4;
 }
 public default double getLongestFinLength() {
 return 20.0;
 }
 public default boolean doFinsHaveScales() {
 return true;
 }
}

public interface SharkFamily extends HasFins {
 public default int getNumberOfFins() {
 return 8;
 }
 public double getLongestFinLength();
 public boolean doFinsHaveScales() { // DOES NOT COMPILE
 return false;
 }
}


Default Methods and Multiple Inheritance
..
-By allowing default methods in interfaces, coupled with the fact a class may implement multiple interfaces, Java has 
essentially opened the door to multiple inheritance problems.

public interface Walk {
 public default int getSpeed() {
 return 5;
 }
}
public interface Run {
 public default int getSpeed() {
 return 10;
 }
}
public class Cat implements Walk, Run { // DOES NOT COMPILE
}

-There is an exception to this rule, if the subclass overrides the duplicate default methods, the code will compile
without issue the ambiguity about which version of the method to call has been removed.

public class Cat implements Walk, Run {
 public int getSpeed() {
 return 1;
 }
 public static void main(String[] args) {
 System.out.println(new Cat().getSpeed());
 }
}


Static Interface Methods
..
-There is really only one distinction between a static method in a class and an interface. A static method defined in 
an interface is not inherited in any classes that implement the interface

1. Like all methods in an interface, a static method is assumed to be public and will not compile if marked as private 
or protected.
2. To reference the static method, a reference to the name of the interface must be used.

public interface Hop {
 static int getJumpHeight() {
 return 8;
 }
}

public class Bunny implements Hop {
 public void printDetails() {
 System.out.println(getJumpHeight()); // DOES NOT COMPILE
 }
}

public class Bunny implements Hop {
 public void printDetails() {
 System.out.println(Hop.getJumpHeight()); // Compiles
 }
}

-A class that implements two interfaces containing static methods with the same signature will still compile at 
runtime, because the static methods are not inherited by the subclass and must be accessed with a reference to the 
interface name.


Understanding Polymorphism
..
-A Java object may be accessed using a reference with the same type as the object, a reference that is a superclass of the object, 
or a reference that defines an interface the object implements, either directly or through a superclass.


public class Primate {
 public boolean hasHair() {
  return true;
 }
}

public interface HasTail {
 public boolean isTailStriped();
}

public class Lemur extends Primate implements HasTail {
 public boolean isTailStriped() {
 return false;
 }
 public int age = 10;
 public static void main(String[] args) {
 Lemur lemur = new Lemur();
 System.out.println(lemur.age);
 HasTail hasTail = lemur;
 System.out.println(hasTail.isTailStriped());
 Primate primate = lemur;
 System.out.println(primate.hasHair());
 }
}

Output
10
false
true

-Once the object has been assigned a new reference type, only the methods and variables available to that reference type are 
callable on the object without an explicit cast

HasTail hasTail = lemur;
 System.out.println(hasTail.age); // DOES NOT COMPILE

Primate primate = lemur;
 System.out.println(primate.isTailStriped()); // DOES NOT COMPILE


Casting Rules
..
1. Casting an object from a subclass to a superclass doesn’t require an explicit cast.
2. Casting an object from a superclass to a subclass requires an explicit cast.
3. The compiler will not allow casts to unrelated types.
4. Even when the code compiles without issue, an exception may be thrown at runtime if the object being cast is not actually 
an instance of that class.

public class Rodent {
}

public class Capybara extends Rodent {
 public static void main(String[] args) {
 Rodent rodent = new Rodent();
 Capybara capybara = (Capybara)rodent; // Throws ClassCastException at runtime
 }
}

-This code creates an instance of Rodent and then tries to cast it to a subclass of Rodent, Capybara. Although this code will 
compile without issue, it will throw a ClassCastException at runtime since the object being referenced is not an instance of 
the Capybara class.

One solution to avoid runtime exception can be
if(rodent instanceof Capybara) {
 Capybara capybara = (Capybara)rodent;
}


Virtual Methods
..
-A virtual method is a method in which the specifi c implementation is not determined until runtime. In fact, all non-final, 
nonstatic, and non-private Java methods are considered virtual methods, since any of them can be overridden at runtime. What 
makes a virtual method special in Java is that if you call a method on an object that overrides a method, you get the overridden 
method, even if the call to the method is on a parent reference or within the parent class.

public class Bird {
 public String getName() {
 return "Unknown";
 }
 public void displayInformation() {
 System.out.println("The bird name is: "+getName());
 }
}
public class Peacock extends Bird {
 public String getName() {
 return "Peacock";
 }
 public static void main(String[] args) {
 Bird bird = new Peacock();
 bird.displayInformation();
 }
} 

The bird name is: Peacock




Extras
..
-Dont use 'this' while accessing static properties
-If interface A has static value test, interface B has static value test then we have to specify in class C that 
implements A and B which test to use. Either A.test or B.test
-But if we also have test variable in class C then simple test will refer to class's variable.

-Before Java 8 all interface methods would be assumed to be abstract. Since Java 8 now includes default and static
methods and they are never abstract, you cannot assume the abstract modifier will be implicitly applied to all 
methods by the compiler.

-A concrete subclass cannot be defined as abstract. Hence concrete refers to as not abstract