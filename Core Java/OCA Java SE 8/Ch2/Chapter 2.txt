Operators And Statements
---

Numeric Promotion Rules
--
1. If two values have different data types, Java will automatically promote one of the values to the larger of the two data types.
2. If one of the values is integral and the other is floating-point, Java will automatically promote the integral value to 
the floating-point value’s data type.
3. Smaller data types, namely byte, short, and char, are first promoted to int any time they’re used with a Java binary 
arithmetic operator, even if neither of the operands is int.
4. After all promotion has occurred and the operands have the same data type, the resulting value will have the same data type 
as its promoted operands

For the third rule, note that unary operators are excluded from this rule. For example, applying ++ to a short value results in a 
short value

Example
..
What is the data type of x * y / z?
short x = 14;
float y = 13;
double z = 30;

First, x will automatically be promoted to int solely because it is a short and it is being used in an arithmetic binary 
operation. The promoted x value will then be automatically promoted to a float so that it can be multiplied with y. The result of 
x * y will then be automatically promoted to a double, so that it can be multiplied with z, resulting in a double value.


Overflow and Underflow
--

Overflow Example
short y = (short)1921222;
-The value, 1,921,222, is too large to be stored as a short, so numeric overflow occurs and it becomes 20,678. Overflow is when 
a number is so large that it will no longer fit within the data type, so the system “wraps around” to the next lowest value and 
counts up from there. 

Underflow Example
System.out.print(2147483647+1); 
-Since 2147483647 is the maximum int value, adding any strictly positive value to it will cause it to wrap to the next negative 
number.


Example
..
short x = 10;
short y = 3;
short z = x * y; // DOES NOT COMPILE

Why It does not compile?
-Short values are automatically promoted to int when applying any arithmetic operator, with the resulting value being of
type int. Trying to set a short variable to an int results in a compiler error, as Java thinks you are trying to implicitly 
convert from a larger data type to a smaller one.
-We know the result of 10 * 3 is 30, which can easily fit into a short variable. If you need the result to be a short, though, 
you can override this behavior by casting the result of the multiplication:

short x = 10;
short y = 3;
short z = (short)(x * y);

-By performing this explicit cast of a larger value into a smaller data type, you are instructing the compiler to ignore its 
default behavior. In other words, you are telling the compiler that you have taken additional steps to prevent overflow or 
underflow

Compound Assignment Operators
--
Besides the simple assignment operator, =, there are also numerous compound assignment operators like,
+=, -=, *= ... etc.

Compound operators are useful for more than just shorthand—they can also save us from having to explicitly cast a value.
Example
..
long x = 10;
int y = 5;
y = y * x;
-This will not compile as y will be promoted to long and when 2 longs are multiplied, it cannot be assigned to an int variable.
We have to explicitly cast the result to int.
-With compound assignment, Java will automatically promote y to long and then also automatically cast the result to an int

long x = 10;
int y = 5;
y *= x;
-Compiles Successfully

Logical Operators
--
The logical operators, (&), (|), and (^), may be applied to both numeric and boolean data types. When they’re applied to boolean 
data types, they’re referred to as logical operators. Alternatively, when they’re applied to numeric data types, they’re referred 
to as bitwise operators, as they perform bitwise comparisons of the bits that compose the number

&, | and ^
1) AND is only true if both operands are true.
2) Inclusive OR is only false if both operands are false.
3) Exclusive OR is only true if the operands are different.

The conditional operators, && and ||, which are often referred to as short-circuit operators. The short-circuit operators are 
nearly identical to the logical operators, & and |, respectively, except that the right-hand side of the expression may never 
be evaluated if the fi nal result can be determined by the left-hand side of the expression. 


Equality Operators
--
Comparing two numeric primitive types. If the numeric values are of different data types, the values are automatically 
promoted as previously described. For example, 5 == 5.00 returns true since the left side is promoted to a double.



If-Then-Else
--
There can be a case where your else-if is unreachable code. The code will compile but java will highlight the statement
Example
..
int x = 5;
if(x < 15) System.out.println("Less Than 18");
else if(x < 11) System.out.println("Less Than 11"); // Unreachabe




Switch Statements
--
Data types supported by switch statements include the following:
1) int and Integer
2) byte and Byte
3) short and Short
4) char and Character
5) int and Integer
6) String
7) enum values

The values in each case statement must be compile-time constant values of the same data type as the switch value. This means you 
can use only literals, enum constants, or final constant variables of the same data type. By final constant, we mean that the 
variable must be marked with the final modifi er and initialized with a literal value in the same expression in which it is 
declared.

Example
..
private int getSortOrder(String firstName, final String lastName) {
 String middleName = "Patricia";
 final String suffix = "JR";
 int id = 0;
 
 switch(firstName) {
   case "Test":
     return 52;
   case middleName: // DOES NOT COMPILE
     id = 5;
     break;
   case suffix:
     id = 0;
     break;
   case lastName: // DOES NOT COMPILE
     id = 8;
     break;
 }
}

-The third case statement compiles without issue because suffix is a final constant variable.
-In the fourth case statement, despite lastName being final, it is not constant as it is passed to the function; therefore, 
this line does not compile


For Loop
--
1) Creating Infinite Loop
..
for( ; ; ) {
 System.out.println("Hello World");
}

2) Adding Multiple Terms to the for Statement
..
int x = 0;
for(long y = 0, z = 4; x < 5 && y < 10; x++, y++) {
 System.out.print(y + " ");
}
System.out.print(x);

3) Redeclaring a Variable in the Initialization Block
..
int x = 0;
for(long y = 0, x = 4; x < 5 && y < 10; x++, y++) { // DOES NOT COMPILE
 System.out.print(x + " ");

-The variable x is initialized twice

4)  Using Incompatible Data Types in the Initialization Block
..
for(long y = 0, int x = 4; x < 5 && y<10; x++, y++) { // DOES NOT COMPILE
 System.out.print(x + " ");

-The variables in the initialization block must all be of the same type



The For-Each statement
Example
..
for(dataType instance : collection){}

-The right-hand side of the for-each loop statement must be a built-in Java array or an object whose class implements 
java.lang.Iterable, which includes most of the Java Collections framework.


When for-each was introduced in Java 5, it was added as a compile-time enhancement. This means that Java actually converts 
the for-each loop into a standard for loop during compilation. 
Example
..
Assume values to be List<Integer>

for(int value : values) {
 System.out.print(value + ", ");
}
For-Loop version
for(java.util.Iterator<Integer> i = values.iterator(); i.hasNext(); ) {
 int value = i.next();
 System.out.print(value + ", ");
}



Adding Optional Labels
--
-A label is an optional pointer to the head of a statement that allows the application fl ow to jump to it or break from it. It is 
a single word that is proceeded by a colon (:).
-Optional labels are often only used in loop structures
Example
..
int[][] myComplexArray = {{5,2,1,3},{3,9,8,9},{5,7,12,7}};
OUTER_LOOP: for(int[] mySimpleArray : myComplexArray) {
 INNER_LOOP: for(int i=0; i<mySimpleArray.length; i++) {
 System.out.print(mySimpleArray[i]+"\t");
 }
 System.out.println();
}


Break vs Continue
..
Both are similar in how they are used, but with different results. While the break statement transfers control to the enclosing 
statement, the continue statement transfers control to the boolean expression that determines if the loop should
continue. In other words, it ends the current iteration of the loop. 

Example
..
FIRST_CHAR_LOOP: for (int a = 1; a <= 4; a++) {
 for (char x = 'a'; x <= 'c'; x++) {
   if (a == 2 || x == 'b')
     continue FIRST_CHAR_LOOP;
   System.out.print(" " + a + x);
 }
}
Output: 1a 3a 4a
-The loop will return control to the parent loop any time the first value is 2 or the second value is b.

-If we remove the FIRST_CHAR_LOOP label in the continue statement so that control is returned to the inner loop instead of the 
outer. 
Output will be: 1a 1c 3a 3c 4a 4c

