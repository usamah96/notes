Exceptions
---

These are the two approaches Java uses when dealing with exceptions. A method can
handle the exception case itself or make it the caller’s responsibility. 

Categories of Exception

Object <- Throwable  <- Exception <- Runtime Exception
                     <- Error

Error means something went so horribly wrong that your program should not attempt 
to recover from it. For example, the disk drive “disappeared.” These are abnormal 
conditions that you aren’t likely to encounter.

A checked exception includes Exception and all subclasses that do not extend
RuntimeException. Checked exceptions tend to be more anticipated—for example, 
trying to read a file that doesn’t exist. 

Example
..
void fall() throws Exception {
 throw new Exception();
}

Because checked exceptions tend to be expected to occur, Java enforces that the 
programmer do something to show the exception was thought about.

An example of a runtime exception is a NullPointerException, which happens when
you try to call a member on a null reference.


Runtime exceptions will be sub-class of RuntimeException
Checked exceptions will be sub-class of Exception and not RuntimeException
Error will be subclass of Error


Using try{} Statements
..
try {// DOES NOT COMPILE
 fall();
} 

This code doesn’t compile because the try block doesn’t have anything after it.
Remember, the point of a try statement is for something to happen if an exception is
thrown. Without another clause, the try statement is lonely


Adding a finally{} block
..
-There must be at-least finally or catch block with try statement or else the
program wont compile
-finally is typically used to close resources such as fi les or databases

try { // DOES NOT COMPILE
 fall();
} finally {
 System.out.println("all better");
} catch (Exception e) {
 System.out.println("get up");
}

Catch and finally blocks are in the wrong order

-There is one exception to “the finally block always runs after the catch block” 
rule: Java defines a method that you call as System.exit(0); The integer parameter 
is the error code that gets returned. System.exit tells Java, “Stop. End the program right now.
Do not pass go.” When System.exit is called in the try or catch block, finally does 
not run.

Catching Various Types of Exceptions
..
class AnimalsOutForAWalk extends RuntimeException { }
class ExhibitClosed extends RuntimeException { }
class ExhibitClosedForLunch extends ExhibitClosed { }

try {
 seeAnimal();
 } catch (AnimalsOutForAWalk e) {// first catch block
 System.out.print("try back later");
 } catch (ExhibitClosed e) {// second catch block
 System.out.print("not today");
 }
}

A rule exists for the order of the catch blocks. Java looks at them in the order 
they appear. If it is impossible for one of the catch blocks to be executed, a 
compiler error about unreachable code occurs. This happens when a superclass is 
caught before a subclass. 

public void visitMonkeys() {
 try {
 seeAnimal();
 } catch (ExhibitClosed e) {
 System.out.print("not today");
 } catch (ExhibitClosedForLunch e) {// DOES NOT COMPILE
 System.out.print("try back later");
 }
}

If the more specifi c ExhibitClosedForLunch exception is thrown, the catch
block for ExhibitClosed runs—which means there is no way for the second catch 
block to ever run. Java correctly tells us there is an unreachable catch block.

Throwing a Second Exception
..

String a = "";
String b = null;
try{
    try{
        a = "first-try ";
        b.length();
    }
    catch(NullPointerException npe){
        npe.printStackTrace();
        a += "first-catch ";
        throw new RuntimeException("runtime from first catch");
    }
    finally {
        a += "first-finally";
    }
}
catch(Exception e){
    e.printStackTrace();
    a += "outer=catch";
}
finally{
    System.out.println(a);
}

Output: first-try first-catch first-finally outer=catch
Exceptions thrown will be NullPointer and Runtime;

-When the first catch throws runtime exception, it will first run the finally block
then will realize the exception is thrown and then the runtime exception will be
caught at the outer catch

-Consider the scenario if we add throw new Exception() after a+= "first finally".
Then RuntimeException will be ignored because the finally throws a new
exception so the outer catch will catch Exception instead of RuntimeException();



Recognizing Common Exception Types
..

Runtime Exceptions
-Extends from RuntimeException.
-Can be throw from JVM or programmer

Types of RuntimeExceptions are
..
a) Arithmetic
.when dividing by 0;

b) ArrayIndexOutOfBound
.illegal access to index of an array

c) ClassCast
.casting to an sub-class which it is not an intance
Example
..
String type = "moose";
Integer number = (Integer) type; // Does not compile because Integer is not a sub-type of string

String type = "moose";
Object obj = type;
Integer number = (Integer) obj;
The compiler sees a cast from Object to Integer. This could be okay. Since the object
contains string value, it will throw ClassCastException

d) IllegalArguement
.method has been passed an illegal or inappropriate arguement
Example
..
public static void setNumberEggs(int numberEggs) {
 if (numberEggs < 0)
 throw new IllegalArgumentException("# eggs must not be negative");
 this.numberEggs = numberEggs;
}

e) NullPointer
.when there is a null reference where an object is required.

f) NumberFormat
.when converting string to a numeric type but the string does not have an appropriate
format.
.very similar to IllegalArguementException as wrong type of arguement is passed to convert
a string into a number. In face NumberFormatException is a sub-class of IllegalArguementException
Example
..
Integer.parseInt("abc");



Checked Exceptions
-Extends from Exception but not RuntimeException.
-Can be throw from JVM or programmer

Types of Checked Exceptions are
..
a) FileNotFound
.when referencing a file that does not exists

b) IO
.problem reading or writing a file
.sub-class of FileNotFoundException



Errors
-Extends from Error
-Throw by JVM and are very rare to see.

Types of Errors are
..
a) ExceptionInitializer
.when static initializer throws and exception and doesn't handle it.
Example
..
static {
 int[] countsOfMoose = new int[3];
 int num = countsOfMoose[-1];
}
public static void main(String[] args) { }

b) StackOverflow
.when a method calls itself too many times (infinite recursion)
Example
..
public static void doNotCodeThis(int num) {
 doNotCodeThis(1);
}

c) NoClassDefFound
.when Java can’t fi nd the class at runtime.
.when a class that code uses it is available at compile time but not at runtime.




Calling Methods That Throw Exceptions
..

Example 1
..
class NoMoreCarrotsException extends Exception {}

public class Bunny {
 public static void main(String[] args) {
 eatCarrot();// DOES NOT COMPILE
 }

 private static void eatCarrot() throws NoMoreCarrotsException {}
}

eatCarrot() didn’t actually throw an exception; it just declared that it could. This is enough for the 
compiler to require the caller to handle or declare the exception.


Example 2
..
public void bad() {
 try {
 eatCarrot();
 } catch (NoMoreCarrotsException e ) {// DOES NOT COMPILE
 System.out.print("sad rabbit");
 }
}

private static void eatCarrot() { }

Java knows that eatCarrot() can’t throw a checked exception—which means there’s noway for the catch block 
in bad() to be reached



Sub-class
..
When a class overrides a method from a superclass or implements a method from an interface, it’s not 
allowed to add new checked exceptions to the method signature

Example 1
..
class CanNotHopException extends Exception { }

class Hopper {
 public void hop() { }
}

class Bunny extends Hopper {
 public void hop() throws CanNotHopException { } // DOES NOT COMPILE
}

A subclass is allowed to declare fewer exceptions than the superclass or interface. This is
legal because callers are already handling them. This is only valid for checked exceptions and not for
runtime exceptions

Example
..
class Hopper {
 public void hop() throws CanNotHopException { }
}
class Bunny extends Hopper {
 public void hop() { }
}

If we call like this
Hopper hopper = new Bunny()
hopper.hop()
We have to handle exception as parent throws exception

But if we do like this
Hopper hopper = new Hopper()
hopper.hop()
Then no need to handle exception


Similarly, a class is allowed to declare a subclass of an exception type. The idea is the
same. The superclass or interface has already taken care of a broader type. This is only valid for checked 
exceptions and not for runtime exceptions.

Example
..
class Hopper {
 public void hop() throws Exception { }
}
class Bunny extends Hopper {
 public void hop() throws CanNotHopException { }
}

For runtime exception, following examples are valid

Example 1
..
class Hopper {
 public void hop() { }
}

class Bunny extends Hopper {
 public void hop() throws IllegalStateException { }
}

Example 2
..
class Hopper {
 public void hop() throws ArithematicException { }
}

class Bunny extends Hopper {
 public void hop() throws RuntimeException { }
}

The reason that it’s okay to declare new runtime exceptions in a subclass method is that the declaration is 
redundant. Methods are free to throw any runtime exceptions they want without mentioning them in the method 
declaration.




Extras
--
-The compilation error of an exception can be resolved in either of two ways 
  .By catching the exception and handling it 
  .By declaring that the exception can be thrown using the throws keyword.

-Classes listed in the throws part of a method declaration must extend java.lang.Throwable

-A method that declares an exception isn’t required to throw one. Runtime exceptions can be thrown in any method regardless
of what it throws

-Code that makes it compile
..
class HasSoreThroatException extends Exception {}
class TiredException extends RuntimeException {}
interface Roar {
 void roar() throws HasSoreThroatException;
}
class Lion implements Roar {
   // INSERT CODE HERE
   // public void roar()
   // public void roar() throws IllegalArguementException
   // public void roar() throws RuntimeException
   // public void roar() throws TiredException
   // public void road() throws HasSoreThroatException
}

The method is allowed to throw no exceptions at all. 
It is also allowed to throw runtime exceptions

-If you handle any checked exception via catch block, there should be a method that throws this exception, otherwise the
compiler will consider the catch block as an unreachable code and the code wont compile
Example
..
public void test(){
  try{
    String a = "Hello World";
  }
  catch(IOException ioe){ // Wont Compile.
  }
}