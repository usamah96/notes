Graph Algorithms
--


Breadth First Search (BFS)
..

Used for traversal of a graph or a tree.	

Graphs may contain cycles, so we may come to the same node again. To avoid processing a node more than once, we divide the vertices into 
two categories:

  1) Visited and
  2) Not visited.
  
BFS uses a queue data structure for traversal. 	

Implementation

1) Declare a queue and insert the starting vertex.
2) Initialize a visited array and mark the starting vertex as visited.
3) Follow the below process till the queue becomes empty:
4) Remove the first vertex of the queue.
5) Mark that vertex as visited.
6) Insert all the unvisited neighbours of the vertex into the queue.

Some of the applications are
  1) Finding shortest path from source to destination in unweighted graph => https://www.geeksforgeeks.org/shortest-path-unweighted-graph/
  2) Testing a graph for bipartiteness: BFS can be used to test if a graph is bipartite or not by coloring the nodes alternatively and checking if two neighboring nodes have the same color.
  3) Copying garbage collection: BFS can be used to traverse the object graph and determine the reachability of objects.
  4) Peer-to-peer networks: BFS can be used to search for a file in a peer-to-peer network by starting from the local node and spreading outwards to neighboring nodes.
  5) Social network analysis: BFS can be used to find connections between people in a social network, such as finding the shortest chain of friends between two people.
  6) Crawlers: BFS can be used to traverse the web graph and crawl web pages for information.
  7) Solving mazes: BFS can be used to find a path through a maze by exploring all the neighboring cells in breadth-first order until the end of the maze is found.
  8) Finding all connected components in a graph: BFS can be used to find all connected components in a graph by starting at an arbitrary vertex and visiting all its neighbors, then visiting the neighbors of those neighbors, and so on.

More Applications => https://www.geeksforgeeks.org/applications-of-breadth-first-traversal/


Bipartite Graph
..
A bipartite graph, also known as a bigraph, is a graph whose vertices can be divided into two disjoint and independent sets such that every edge 
in the graph connects a vertex in one set to a vertex in the other set. In other words, there are no edges within each set.

Example Use Cases,
Matching problems: Bipartite graphs can be used to model matching problems, where the goal is to find a maximum matching between the two sets of 
vertices. Examples of such problems include assigning students to dorm rooms or matching organ donors with recipients.

Social networks: Bipartite graphs can represent social networks where one set of vertices represents users and the other set represents groups or 
interests. For instance, a user can be connected to a group if they are interested in the topics discussed in the group.

Recommender systems: Bipartite graphs can also be used in recommender systems where one set of vertices represents users and the other set 
represents items. An edge between a user and an item can represent a rating or a purchase.

Image and signal processing: Bipartite graphs can also be used to model image and signal processing problems. In these applications, one set of 
vertices represents the pixels or the signal values, and the other set represents the features or the filters used to process the pixels or the 
signal values. An edge between a pixel and a feature can represent the intensity of the pixel or the response of the filter to the signal value.



Depth First Search (DFS)
..

The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible 
along each branch before backtracking. 
Idea is to start from the root or any arbitrary node and mark the node and move to the adjacent unmarked node and continue this loop until there is 
no unmarked adjacent node. Then backtrack and check for other unmarked nodes and traverse them. Finally, print the nodes in the path.

Coding Examples for DFS => https://www.geeksforgeeks.org/archives/11644

DFS uses a stack data structure for traversal Or Can be done using Recursion

Implementation

1) Create a recursive function that takes the index of the node and a visited array.
2) Mark the current node as visited and print the node.
3) Traverse all the adjacent and unmarked nodes and call the recursive function with the index of the adjacent node.

Applications
  1) Topological Sort
  2) Path finding
  3) Detection of Cycle in Graph
  4) Maze Puzzle problem

More Applications => https://www.geeksforgeeks.org/applications-of-depth-first-search/


BFS is preferred over DFS in the following scenarios:

1) Shortest path: BFS is guaranteed to find the shortest path in an unweighted graph. DFS does not have this guarantee.
2) Distance-related problems: BFS is useful for solving problems where the solution depends on the minimum or maximum distance 
   from the source node.
3) Dense graphs: In dense graphs, where there are many vertices and edges, BFS is faster than DFS because it explores the vertices 
   closer to the source node first.

DFS is preferred over BFS in the following scenarios:

1) Depth-related problems: DFS is useful for solving problems where the solution depends on the maximum depth of the search tree, 
   such as finding the deepest node in a tree.

2) Backtracking: DFS is often used for backtracking algorithms, where the solution is found by trying out different paths and 
   undoing them if they do not lead to the goal.

3) Space-constrained systems: DFS is often more efficient than BFS in terms of memory usage, since it only needs to store the 
   vertices on the current path in the call stack, whereas BFS needs to store all vertices in a queue.


Dijkastra
..

Given a graph and a source vertex in the graph, find the shortest paths from the source to all vertices in the given graph.

We maintain an array where the index represents the node number and the value represents the distance from the source node.
We define an array lets say of size 9 and mark all values an infinity as initial values and source value as 0 because source to source distance will be 0.

Implementation
1) We pick the vertex with minimum distance value, here the value will be source in step 1 with distance 0
2) We add the node number in another set to keep track of it
3) We get the adjacent nodes and add their values to the array.
4) We then pick the minimum node except the node which was picked earlier and repeat the step again till all array elements are filled up.

This algorithm is widely used in routing protocols required by the router  to update their forwarding table.
Google Maps uses Dijkstra and A* algorithm

If in a weighted graph all weights are same, then it is similar to BFS.