int power(int base, int basePow){
	if(basePow==0)  return 1;  
	else if(basePow==1)  return base;  
	else if(basePow>1)  return base*power(base,basePow-1);  
	else return 1/power(base, -1 * basePow);  
}

//-----------------------------------------------------------------------------

public boolean isPrime(int n) {
    int i;
    for (i = 2; i < n; i++){
        if (n % i == 0)
            return false;
    }
    return true;
}

//-----------------------------------------------------------------------------

Check_Palindrome()
{
      String original = "madam";
      String reverse="";
      int length = original.length();
      for ( int i = length - 1 ; i >= 0 ; i-- )
         reverse = reverse + original.charAt(i);
 
      if (original.equals(reverse))
         System.out.println("Entered string is a palindrome.");
      else
         System.out.println("Entered string is not a palindrome.");
}

//-----------------------------------------------------------------------------

Sort_alphabetical(){ 
  string s = "cbba"; 
  for(int i=0; i<s.length(); i++)
  for(int j=i+1; j<s.length(); j++)
  if(s[j]<s[i]){
  char temp = s[i];
  s[i]=s[j]; s[j]=temp;
  }
}

//-----------------------------------------------------------------------------

int Reverse_numbers(int n) {
int multiply = 10, remainder = 0, result = 0;
while(n>0) {
remainder = n%10;
result = result*multiply + remainder;
n= n/10;
}
return result;
} 

//-----------------------------------------------------------------------------

Node *ListDelete(Node *currP, State value)
{
  /* See if we are at end of list. */
  if (currP == NULL)
    return NULL;

  if (currP->state == value) {
    Node *tempNextP;

    tempNextP = currP->next;

    /* Deallocate the node. */
    free(currP);

    return tempNextP;
  }

  currP->next = ListDelete(currP->next, value);
  return currP;
}

//-----------------------------------------------------------------------------

int Recursive_factorialfinder(int x)         
{
    if (x == 1)        // HERE 5 is not equal to 1 so goes to else
    {
        return 1;
    }else
    {
        return x*Recursive_factorialfinder(x-1); 
    }
}

//-----------------------------------------------------------------------------


public void bfs()
    {
        // BFS uses Queue data structure
        Queue queue = new LinkedList();
        queue.add(this.rootNode);
        printNode(this.rootNode);
        rootNode.visited = true;
        while(!queue.isEmpty()) {
            Node node = (Node)queue.remove();
            Node child=null;
            while((child=getUnvisitedChildNode(node))!=null) {
                child.visited=true;
                printNode(child);
                queue.add(child);
            }
        }
        // Clear visited property of nodes
        clearNodes();
    }

//-----------------------------------------------------------------------------

public void dfs() {
        // DFS uses Stack data structure
        Stack stack = new Stack();
        stack.push(this.rootNode);
        rootNode.visited=true;
        printNode(rootNode);
        while(!stack.isEmpty()) {
            Node node = (Node)s.peek();
            Node child = getUnvisitedChildNode(n);
            if(child != null) {
                child.visited = true;
                printNode(child);
                s.push(child);
            }
            else {
                s.pop();
            }
        }
        // Clear visited property of nodes
        clearNodes();
    }
}