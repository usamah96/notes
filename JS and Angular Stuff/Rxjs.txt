Operators

-map(): For transforming the data

-throttleTime(): To pause the emitting value.
eg
..
let observable = Rx.Observable.interval(1000);
observable.pipe( throttleTime(2000); ).subscribe(data => { console.log(data); })

Values are generated every second but we have given the pause of 2 second so the output after every 2 second 
will be : 0 2 4 6

Subject

filter()

debounceTime() and distinctUntilChanged()
-We use debounceTime to wait until user has finished working and then emit an event.
eg
..
observable.debounceTime(2000).subscribe(value => console.log(value))

Subscribe will not get called when the user is typing. Once the user stops for 2 seconds then
it will log to the console.

-We use distinctUntilChanged to stop the duplicate hit being made. If a user types 'Hello' and
stops for 2 seconds, the hit will be made. If he removes 'o' and again types 'o' in less then
2 seconds then the hit will not be made as the previous hit of Hello is already made.
eg
..
observable.debounceTime(2000).distinctUntilChanged().subscribe(value => console.log(value))

scan() vs reduce()
-We use reduce to reduce our array to a single value and get the final value
-We use scan to do the same but scan returns and prints every value it reduces to.
eg
..
var observable = Rx.Observable.of(1,2,3,4,5);

observable.reduce((total, current) => { reurn total + current }, 0)
.subscribe(val => console.log(val))
Output: 15

observable.scan((total, current) => { reurn total + current }, 0)
.subscribe(val => console.log(val))
Output: 1 3 6 10 15



pluck()
-We use it to extract values from the object
eg
..
Extracting the value from the $event

(change)="search($event);"
search(value){ this.subject.next(value) }

this.subject.pluck('target', 'value').debounceTime(500).distinctUntilChanged()
.subscribe(val => console.log(val));



mergeMap()
RxJS mergeMap operator projects each source value to an Observable and finally they are merged 
into output Observable using RxJS mergeAll operator. If the source Observable has emitted more 
than one element to mergeMap and if inner Observable of mergeMap has not completed yet for the 
previous element then mergeMap will wait to execute all inner Observable and then merge them in 
one Observable as output.
eg
..
const getData = (param) => {
  return of(`retrieved new data with param ${param}`).pipe(
    delay(1000)
  )
}

// using a regular map
from([1,2,3,4]).pipe(
  map(param => getData(param))
).subscribe(val => val.subscribe(data => console.log(data)));

As you can might imagine this is far from ideal as we have to call Subscribe two times. 

// using mergeMap
from([1,2,3,4]).pipe(
  mergeMap(param => getData(param))
).subscribe(val => console.log(val));

eg
..
of('x', 'y', 'z').pipe(mergeMap(val => { return of(1,2).pipe(map(v => val + v)) }))
.subscribe(res => console.log(res))
Output: x1 x2 y1 y2 z1 z2



switchMap()



BehaviourSubject vs Subject
-In BS we can define a default value.



forkJoin()
-Works similar to Promise.all()
-Once all observables finishes then we can get the data in the array form
eg
..
const posts = this.getPosts();
const comments = this.getComments();

const combined = forkJoin(posts, comments);
combined.subscribe(data => console.log(data));
data : [Posts[], Comments[]]



Take
  -take(val: number)/ first(): Will take only number of hits supplied
  eg:
  var obs = fromEvent(document, 'click');
  obs.pipe(take(1)).subscribe(e => console.log('Clicked'));
  Will only fire after the first click inside anywhere in the document.

  -takeWhile(): Supply the condition to stop emitting when a certain condition is true;
  eg:
  var obs = fromEvent(document, 'click');
  var counter = 0;
  obs.pipe(takeWhile(()=>counter < 3)).subscribe(e => console.log('Clicked'); counter++;);