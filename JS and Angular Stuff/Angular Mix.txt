Angular Mix
-----------------------
Angular View Encapsulation
-How the template and styles should be encapsulated

Understanding Shadow DOM
-An important aspect of web components is encapsulation — being able to keep the markup 
structure, style, and behavior hidden and separate from other code on the page so that 
different parts do not clash, and the code can be kept nice and clean. The Shadow DOM 
API is a key part of this, providing a way to attach a hidden separated DOM to an 
element.
-Shadow DOM allows hidden DOM trees to be attached to elements in the regular DOM tree — 
this shadow DOM tree starts with a shadow root, underneath which can be attached to any 
elements you want, in the same way as the normal DOM.
-The difference is that none of the code inside a shadow DOM can affect anything outside 
it, allowing for handy encapsulation.

Angular provides there types of View Encapsulation. They are as follows:
1) Emulated: No Shadow DOM | Style Encapsulation
2) Native: Shadow DOM | Style Encapsulation
3) None: No Shadow DOM | No Style Encapsulation




Structural Directive - The Star Syntax
-The star reflects to either add or remove from the DOM.
-When we create a directive its default selector represents the attribute directive 
because behind the scene angular uses it as an attribute via ng-template

<div *nngIf="Something"> 
  ...
  ...
</div>

Angular BTS
..
<ng-template [ngIf]="Something">
 ....
 ....
</ng-template>




Custom Structural Directive
-TemplateRef: Grab reference to the <ng-template>
-ViewContainerRef: Container where one or more view can be attached.
..
Directive to show login signup on button click with close event to be handled via
service
eg
..
Inside app.component.html
<ng-template #auth>
  <auth-tmpl></auth-tmpl>
</ng-template>

<ng-template [MyDir]="[loginBtn, signupBtn]">
  <modal [bodyTmpl]="auth"></modal>
</ng-template>

<br><br><br><br>

<button #loginBtn> Login </button>
<button #signupBtn> SignUp </button>

Inside auth-tmpl.html
<div style="border: 1px solid black">
    <span> Login  </span>
    <span> Sign Up  </span>
    
    <div>
        <input type="text" placeholder="Username">
    </div>
    
    <div>
        <input type="text" placeholder="Password">
    </div>
</div>

Inside auth-tmpl.ts
// ----Nothing------

Inside custom diective
constructor(private tl: TemplateRef<any>, private viewContainerRef: ViewContainerRef, 
   private modSer: ModalSerService) { }

  ngOnInit(){
    this.modSer.close.subscribe(()=>{
      this.viewContainerRef.clear();
    })
  }

  @Input()
  set MyDir(els: HTMLBaseElement[]){

    els.forEach(el => {
      el.addEventListener('click', () => {
        this.viewContainerRef.clear();
        this.viewContainerRef.createEmbeddedView(this.tl);
      });
    })

Inside modal.component.html
<div style="border: 1px solid red" (click)="closeModal()">
    Close
    <br><br>
    <div (click)="closeModal($event)">
        <ng-container *ngIf="bodyTmpl else noTempl">
            <ng-container *ngTemplateOutlet="bodyTmpl"></ng-container>
        </ng-container>
        
        <ng-template #noTempl>
            Nothing To Show.
        </ng-template>  
    </div>
</div>

Inside modal.ts
@Input('bodyTmpl') bodyTmpl: TemplateRef<any>;

  constructor(private modSer: ModalSerService) { }

  closeModal(mainDiv: Event){
    if(mainDiv){
      mainDiv.preventDefault();
      mainDiv.stopPropagation();
    }
    else{
      this.modSer.closed();
    }
  }





Subject and Observables
Probably a more important distinction between Subject and Observable is that a Subject 
has state, it keeps a list of observers. On the other hand, an Observable is really just
a function that sets up observation. While Subjects are Observables, Subjects also 
implement an Observer interface.



BehaviorSubject
A BehaviorSubject holds one value. When it is subscribed it emits the value immediately. 
A Subject doesn't hold a value. The BehaviorSubject has the characteristic that it 
stores the “current” value. This means that you can always directly get the last emitted
value from the BehaviorSubject.
eg
..
const subject = new Rx.BehaviorSubject();

// subscriber 1
subject.subscribe((data) => {
    console.log('Subscriber A:', data);
});

subject.next(Math.random());
subject.next(Math.random());

// subscriber 2
subject.subscribe((data) => {
    console.log('Subscriber B:', data);
});

subject.next(Math.random());

console.log(subject.value)

// output
// Subscriber A: 0.24957144215097515
// Subscriber A: 0.8751123892486292
// Subscriber B: 0.8751123892486292
// Subscriber A: 0.1901322109907977
// Subscriber B: 0.1901322109907977
// 0.1901322109907977

Subject
Subjects are used for multicasting Observables. This means that Subjects will make sure 
each subscription gets the exact same value as the Observable execution is shared among
the subscribers.
eg
..
const mySubject = new Rx.Subject();
mySubject.next(1);
const subscription1 = mySubject.subscribe(x => {
  console.log('From subscription 1:', x);
});
mySubject.next(2);
const subscription2 = mySubject.subscribe(x => {
  console.log('From subscription 2:', x);
});
mySubject.next(3);
subscription1.unsubscribe();
mySubject.next(4);

Output
From subscription 1: 2
From subscription 1: 3
From subscription 2: 3
From subscription 2: 4


ReplaySubject
The ReplaySubject is comparable to the BehaviorSubject in the way that it can 
send “old” values to new subscribers. It however has the extra characteristic that it 
can record a part of the observable execution and therefore store multiple old values 
and “replay” them to new subscribers.
eg
..
const subject = new Rx.ReplaySubject(2, 100);

// subscriber 1
subject.subscribe((data) => {
    console.log('Subscriber A:', data);
});

setInterval(() => subject.next(Math.random()), 200);

// subscriber 2
setTimeout(() => {
  subject.subscribe((data) => {
    console.log('Subscriber B:', data);
  });s
}, 1000)

// Subscriber A: 0.44524184251927656
// Subscriber A: 0.5802631630066313
// Subscriber A: 0.9792165506699135
// Subscriber A: 0.3239616040117268
// Subscriber A: 0.6845077617520203
// Subscriber B: 0.6845077617520203
// Subscriber A: 0.41269171141525707
// Subscriber B: 0.41269171141525707
// Subscriber A: 0.8211466186035139
// Subscriber B: 0.8211466186035139





Change Detection

Consider Code:

@Component({
    selector: 'my-app',
    template: `
        <h3>
            Change detection is triggered at:
            <span [textContent]="time | date:'hh:mm:ss:SSS'"></span>
        </h3>
        <button (click)="0">Trigger Change Detection</button>
    `
})
export class AppComponent {
    get time() {
        return Date.now();
    }
}
Clicking on button will throw an error of ExpressionChangedAfterItHasBeenCheckedError.

About ExpressionChangedAfterItHasBeenCheckedError.
https://indepth.dev/everything-you-need-to-know-about-the-expressionchangedafterithasbeencheckederror-error/


Explanation:

There are two main building blocks of change detection in Angular:

-A Component View
-The Associated Bindings

Every component in Angular has a template with HTML elements. When Angular creates the
DOM nodes to render the contents of the template on the screen, it needs a place to 
store the references to those DOM nodes. For that purpose, internally there’s a data 
structure known as View. It’s also used to store the reference to the component instance 
and the previous values of binding expressions. There’s a one to one relationship 
between a component and a view. See Figure CDN 1 in snapshot folder

As the compiler analyzes the template, it identifies properties of the DOM elements that 
may need to be updated during change detection. For each such property, the compiler 
creates a binding. The binding defines the property name to update and the expression 
that Angular uses to obtain a new value.
In our case, the property time is used in the expression for the property textContent. 
So Angular creates a binding and associates it with the span element: See figure CDN 2

When Angular checks a view, it simply runs over all bindings generated for a view by the 
compiler. It evaluates expressions and compares their result to the values stored in the 
oldValues array on the view. That’s where the name dirty checking comes from. If it 
detects the difference, it updates the DOM property relevant to the binding. And it 
also needs to put the new value into the oldValues array on the view. And that’s it. 
You now have an updated UI. Once Angular is done checking the current component, it 
repeats exactly the same steps for child components.

But where does the error come from?

After each change detection cycle, in the development mode, Angular synchronously runs 
another check to ensure that expressions produce the same values as during the 
preceding change detection run. This check is not part of the original change detection 
cycle. It runs after the check is finished for the entire tree of components and 
performs exactly the same steps. However, this time, as Angular detects the difference, 
it doesn’t update the DOM. Instead, it throws the 
ExpressionChangedAfterItHasBeenCheckedError.